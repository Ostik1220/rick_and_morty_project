{"mappings":"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","sources":["<anon>","src/episodes.js","src/js/episodes-js/maine-episodes.js"],"sourcesContent":["const $357a6a9add072938$var$episodesContainer = document.querySelector('.episodes-data');\nconst $357a6a9add072938$var$loadMoreBtn = document.querySelector('.episodes-button');\nconst $357a6a9add072938$var$nameInput = document.querySelector('.episodes-search-input');\nconst $357a6a9add072938$var$episodeSelect = document.getElementById('episodeSelect');\nlet $357a6a9add072938$var$currentPage = 1;\nlet $357a6a9add072938$var$allEpisodes = [];\nlet $357a6a9add072938$var$displayedEpisodes = [];\nconst $357a6a9add072938$var$perPage = 8;\nconst $357a6a9add072938$var$seasonBackgrounds = {\n    1: \"../../img/season-1.png\",\n    2: \"../../img/season-2.png\",\n    3: \"../../img/season-3.png\",\n    4: \"../../img/season-4.png\",\n    5: \"../../img/season-5.png\",\n    6: \"../../img/season-6.png\"\n};\nasync function $357a6a9add072938$var$fetchAllEpisodes() {\n    try {\n        let results = [];\n        const firstRes = await fetch(`https://rickandmortyapi.com/api/episode?page=1`);\n        const firstData = await firstRes.json();\n        firstData.results.forEach((ep)=>results.push(ep));\n        const totalPages = firstData.info.pages;\n        for(let page = 2; page <= totalPages; page++){\n            const res = await fetch(`https://rickandmortyapi.com/api/episode?page=${page}`);\n            const data = await res.json();\n            data.results.forEach((ep)=>results.push(ep));\n        }\n        $357a6a9add072938$var$allEpisodes = results;\n        $357a6a9add072938$var$generateSelectOptions($357a6a9add072938$var$allEpisodes);\n        $357a6a9add072938$var$renderEpisodes();\n    } catch (error) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0435\\u043F\\u0456\\u0437\\u043E\\u0434\\u0456\\u0432:\");\n    }\n}\nfunction $357a6a9add072938$var$generateSelectOptions(episodes) {\n    const grouped = episodes.reduce((acc, ep)=>{\n        const season = `Season ${ep.episode.slice(1, 3)}`;\n        const episodeNum = ep.episode.slice(4, 6);\n        acc[season] = (acc[season] || []).concat({\n            id: ep.id,\n            name: `Episode ${episodeNum}`\n        });\n        return acc;\n    }, {});\n    $357a6a9add072938$var$episodeSelect.innerHTML = `<option value=\"\">All episodes</option>`;\n    for(const season in grouped){\n        const seasonOption = document.createElement(\"option\");\n        seasonOption.value = season;\n        seasonOption.textContent = `${season} (all)`;\n        $357a6a9add072938$var$episodeSelect.appendChild(seasonOption);\n        const optGroup = document.createElement(\"optgroup\");\n        optGroup.label = season;\n        grouped[season].forEach((ep)=>{\n            const option = document.createElement(\"option\");\n            option.value = ep.id;\n            option.textContent = ep.name;\n            optGroup.appendChild(option);\n        });\n        $357a6a9add072938$var$episodeSelect.appendChild(optGroup);\n    }\n}\nfunction $357a6a9add072938$var$filterEpisodes() {\n    const nameValue = $357a6a9add072938$var$nameInput.value.toLowerCase();\n    const selected = $357a6a9add072938$var$episodeSelect.value;\n    return $357a6a9add072938$var$allEpisodes.filter((ep)=>{\n        const matchName = ep.name.toLowerCase().includes(nameValue);\n        let matchSelect = true;\n        if (selected) {\n            if (selected.startsWith(\"Season\")) {\n                const seasonNum = selected.split(\" \")[1];\n                matchSelect = ep.episode.startsWith(\"S\" + seasonNum.padStart(2, \"0\"));\n            } else matchSelect = ep.id == selected;\n        }\n        return matchName && matchSelect;\n    });\n}\nfunction $357a6a9add072938$var$renderEpisodes(reset = true) {\n    if (reset) {\n        $357a6a9add072938$var$episodesContainer.innerHTML = \"\";\n        $357a6a9add072938$var$displayedEpisodes = [];\n        $357a6a9add072938$var$currentPage = 1;\n    }\n    const filtered = $357a6a9add072938$var$filterEpisodes();\n    const start = ($357a6a9add072938$var$currentPage - 1) * $357a6a9add072938$var$perPage;\n    const end = $357a6a9add072938$var$currentPage * $357a6a9add072938$var$perPage;\n    const toDisplay = filtered.slice(start, end);\n    $357a6a9add072938$var$displayedEpisodes = $357a6a9add072938$var$displayedEpisodes.concat(toDisplay);\n    const markup = toDisplay.map((ep)=>{\n        const seasonNumber = parseInt(ep.episode.slice(1, 3), 10);\n        const episodeNumber = parseInt(ep.episode.slice(4, 6), 10);\n        const backgroundSeason = $357a6a9add072938$var$seasonBackgrounds[seasonNumber];\n        return `\n      <div data-modal-open \n           class=\"episode-card episodes-${seasonNumber}\" \n           data-ep-name=\"${ep.name}\"\n           data-ep-id=\"${ep.id}\"\n           data-ep-air=\"${ep.air_date}\">\n        <div class=\"episode-minicontainer\">\n          <h3 class=\"episodes-cardtitle\">${ep.name}</h3>\n          <div class=\"episodes-cardcontainer\">\n            <p class=\"episodes-textitle\">Season: \n              <span class=\"episodes-span\">${seasonNumber}</span>\n            </p>\n            <p class=\"episodes-textitle\">Episode: \n              <span class=\"episodes-span\">${episodeNumber}</span>\n            </p>\n            <p class=\"episodes-textitle\">Air date: \n              <span class=\"episodes-span\">${ep.air_date}</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    `;\n    }).join(\"\");\n    $357a6a9add072938$var$episodesContainer.innerHTML += markup;\n    if ($357a6a9add072938$var$displayedEpisodes.length >= filtered.length) $357a6a9add072938$var$loadMoreBtn.style.display = \"none\";\n    else $357a6a9add072938$var$loadMoreBtn.style.display = \"block\";\n}\n$357a6a9add072938$var$nameInput.addEventListener(\"input\", ()=>$357a6a9add072938$var$renderEpisodes());\nconsole.log($357a6a9add072938$var$nameInput);\n$357a6a9add072938$var$episodeSelect.addEventListener(\"change\", ()=>$357a6a9add072938$var$renderEpisodes());\n$357a6a9add072938$var$loadMoreBtn.addEventListener(\"click\", ()=>{\n    $357a6a9add072938$var$currentPage++;\n    $357a6a9add072938$var$renderEpisodes(false);\n});\n(()=>{\n    const refs = {\n        closeModalBtn: document.querySelector('[data-modal-close]'),\n        modal: document.querySelector('[data-modal]')\n    };\n    document.querySelector('.episodes-data').addEventListener('click', (e)=>{\n        const card = e.target.closest('[data-modal-open]');\n        if (card) toggleModal();\n    });\n    refs.closeModalBtn.addEventListener('click', toggleModal);\n    function toggleModal() {\n        refs.modal.classList.toggle('is-hidden');\n        document.body.classList.toggle('no-scroll');\n    }\n})();\ndocument.querySelector('.episodes-data').addEventListener('click', (e)=>{\n    const card = e.target.closest('[data-modal-open]');\n    if (card) {\n        const epName = card.getAttribute('data-ep-name');\n        const epId = card.getAttribute('data-ep-id');\n        const epAir = card.getAttribute('data-ep-air');\n        document.querySelector('.popup-title').textContent = epName;\n        document.querySelector('.popup-id').textContent = epId;\n        document.querySelector('.popup-air').textContent = epAir;\n        document.querySelector('[data-modal]').classList.remove('is-hidden');\n        document.body.classList.add('no-scroll');\n    }\n});\ndocument.querySelector('[data-modal-close]').addEventListener('click', ()=>{\n    document.querySelector('[data-modal]').classList.add('is-hidden');\n    document.body.classList.remove('no-scroll');\n});\n$357a6a9add072938$var$fetchAllEpisodes();\n\n\n\n\n//# sourceMappingURL=episodes.1716f0e0.js.map\n","import './js/episodes-js/maine-episodes';\r\n","const episodesContainer = document.querySelector('.episodes-data');\r\nconst loadMoreBtn = document.querySelector('.episodes-button');\r\nconst nameInput = document.querySelector('.episodes-search-input');\r\nconst episodeSelect = document.getElementById('episodeSelect');\r\n\r\nlet currentPage = 1;\r\nlet allEpisodes = [];\r\nlet displayedEpisodes = [];\r\nconst perPage = 8;\r\n\r\nconst seasonBackgrounds = {\r\n  1: \"../../img/season-1.png\",\r\n  2: \"../../img/season-2.png\",\r\n  3: \"../../img/season-3.png\",\r\n  4: \"../../img/season-4.png\",\r\n  5: \"../../img/season-5.png\",\r\n  6: \"../../img/season-6.png\",\r\n};\r\n\r\nasync function fetchAllEpisodes() {\r\n  try {\r\n    let results = [];\r\n\r\n    const firstRes = await fetch(`https://rickandmortyapi.com/api/episode?page=1`);\r\n    const firstData = await firstRes.json();\r\n\r\n    firstData.results.forEach(ep => results.push(ep));\r\n\r\n    const totalPages = firstData.info.pages;\r\n\r\n    for (let page = 2; page <= totalPages; page++) {\r\n      const res = await fetch(`https://rickandmortyapi.com/api/episode?page=${page}`);\r\n      const data = await res.json();\r\n      data.results.forEach(ep => results.push(ep));\r\n    }\r\n\r\n    allEpisodes = results;\r\n    generateSelectOptions(allEpisodes);\r\n    renderEpisodes();\r\n  } catch (error) {\r\n    console.error(\"Помилка завантаження епізодів:\");\r\n  }\r\n}\r\n\r\nfunction generateSelectOptions(episodes) {\r\n  const grouped = episodes.reduce((acc, ep) => {\r\n    const season = `Season ${ep.episode.slice(1, 3)}`;\r\n    const episodeNum = ep.episode.slice(4, 6);\r\n\r\n    acc[season] = (acc[season] || []).concat({ id: ep.id, name: `Episode ${episodeNum}` });\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  episodeSelect.innerHTML = `<option value=\"\">All episodes</option>`;\r\n\r\n  for (const season in grouped) {\r\n    const seasonOption = document.createElement(\"option\");\r\n    seasonOption.value = season;\r\n    seasonOption.textContent = `${season} (all)`;\r\n    episodeSelect.appendChild(seasonOption);\r\n\r\n    const optGroup = document.createElement(\"optgroup\");\r\n    optGroup.label = season;\r\n    grouped[season].forEach(ep => {\r\n      const option = document.createElement(\"option\");\r\n      option.value = ep.id;\r\n      option.textContent = ep.name;\r\n      optGroup.appendChild(option);\r\n    });\r\n    episodeSelect.appendChild(optGroup);\r\n  }\r\n}\r\n\r\nfunction filterEpisodes() {\r\n  const nameValue = nameInput.value.toLowerCase();\r\n  const selected = episodeSelect.value;\r\n\r\n  return allEpisodes.filter(ep => {\r\n    const matchName = ep.name.toLowerCase().includes(nameValue);\r\n\r\n    let matchSelect = true;\r\n    if (selected) {\r\n      if (selected.startsWith(\"Season\")) {\r\n        const seasonNum = selected.split(\" \")[1];\r\n        matchSelect = ep.episode.startsWith(\"S\" + seasonNum.padStart(2, \"0\"));\r\n      } else {\r\n        matchSelect = ep.id == selected;\r\n      }\r\n    }\r\n\r\n    return matchName && matchSelect;\r\n  });\r\n}\r\n\r\nfunction renderEpisodes(reset = true) {\r\n  if (reset) {\r\n    episodesContainer.innerHTML = \"\";\r\n    displayedEpisodes = [];\r\n    currentPage = 1;\r\n  }\r\n\r\n  const filtered = filterEpisodes();\r\n  const start = (currentPage - 1) * perPage;\r\n  const end = currentPage * perPage;\r\n  const toDisplay = filtered.slice(start, end);\r\n\r\n  displayedEpisodes = displayedEpisodes.concat(toDisplay);\r\n\r\n  const markup = toDisplay.map(ep => {\r\n    const seasonNumber = parseInt(ep.episode.slice(1, 3), 10);\r\n    const episodeNumber = parseInt(ep.episode.slice(4, 6), 10);\r\n    const backgroundSeason = seasonBackgrounds[seasonNumber];\r\n\r\n\r\n    return `\r\n      <div data-modal-open \r\n           class=\"episode-card episodes-${seasonNumber}\" \r\n           data-ep-name=\"${ep.name}\"\r\n           data-ep-id=\"${ep.id}\"\r\n           data-ep-air=\"${ep.air_date}\">\r\n        <div class=\"episode-minicontainer\">\r\n          <h3 class=\"episodes-cardtitle\">${ep.name}</h3>\r\n          <div class=\"episodes-cardcontainer\">\r\n            <p class=\"episodes-textitle\">Season: \r\n              <span class=\"episodes-span\">${seasonNumber}</span>\r\n            </p>\r\n            <p class=\"episodes-textitle\">Episode: \r\n              <span class=\"episodes-span\">${episodeNumber}</span>\r\n            </p>\r\n            <p class=\"episodes-textitle\">Air date: \r\n              <span class=\"episodes-span\">${ep.air_date}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }).join(\"\");\r\n\r\n  episodesContainer.innerHTML += markup;\r\n\r\n  if (displayedEpisodes.length >= filtered.length) {\r\n    loadMoreBtn.style.display = \"none\";\r\n  } else {\r\n    loadMoreBtn.style.display = \"block\";\r\n  }\r\n}\r\n\r\nnameInput.addEventListener(\"input\", () => renderEpisodes());\r\nconsole.log(nameInput)\r\nepisodeSelect.addEventListener(\"change\", () => renderEpisodes());\r\nloadMoreBtn.addEventListener(\"click\", () => {\r\n  currentPage++;\r\n  renderEpisodes(false);\r\n});\r\n\r\n(() => {\r\n  const refs = {\r\n    closeModalBtn: document.querySelector('[data-modal-close]'),\r\n    modal: document.querySelector('[data-modal]'),\r\n  };\r\n\r\n  document.querySelector('.episodes-data').addEventListener('click', e => {\r\n    const card = e.target.closest('[data-modal-open]');\r\n    if (card) {\r\n      toggleModal();\r\n    }\r\n  });\r\n\r\n  refs.closeModalBtn.addEventListener('click', toggleModal);\r\n\r\n  function toggleModal() {\r\n    refs.modal.classList.toggle('is-hidden');\r\n    document.body.classList.toggle('no-scroll');\r\n  }\r\n})();\r\n\r\ndocument.querySelector('.episodes-data').addEventListener('click', e => {\r\n  const card = e.target.closest('[data-modal-open]');\r\n\r\n  if (card) {\r\n    const epName = card.getAttribute('data-ep-name');\r\n    const epId = card.getAttribute('data-ep-id');\r\n    const epAir = card.getAttribute('data-ep-air');\r\n\r\n    document.querySelector('.popup-title').textContent = epName;\r\n    document.querySelector('.popup-id').textContent = epId;\r\n    document.querySelector('.popup-air').textContent = epAir;\r\n\r\n    document.querySelector('[data-modal]').classList.remove('is-hidden');\r\n    document.body.classList.add('no-scroll');\r\n  }\r\n});\r\n\r\ndocument.querySelector('[data-modal-close]').addEventListener('click', () => {\r\n  document.querySelector('[data-modal]').classList.add('is-hidden');\r\n  document.body.classList.remove('no-scroll');\r\n});\r\n\r\nfetchAllEpisodes();\r\n"],"names":["$357a6a9add072938$var$episodesContainer","document","querySelector","$357a6a9add072938$var$loadMoreBtn","$357a6a9add072938$var$nameInput","$357a6a9add072938$var$episodeSelect","getElementById","$357a6a9add072938$var$currentPage","$357a6a9add072938$var$allEpisodes","$357a6a9add072938$var$displayedEpisodes","$357a6a9add072938$var$seasonBackgrounds","$357a6a9add072938$var$fetchAllEpisodes","results","firstRes","fetch","firstData","json","forEach","ep","push","totalPages","info","pages","page","res","data","$357a6a9add072938$var$generateSelectOptions","episodes","grouped","reduce","acc","season","episode","slice","episodeNum","concat","id","name","innerHTML","seasonOption","createElement","value","textContent","appendChild","optGroup","label","option","$357a6a9add072938$var$renderEpisodes","error","console","reset","filtered","$357a6a9add072938$var$filterEpisodes","nameValue","toLowerCase","selected","filter","matchName","includes","matchSelect","startsWith","seasonNum","split","padStart","start","end","toDisplay","markup","map","seasonNumber","parseInt","episodeNumber","air_date","join","length","style","display","addEventListener","log","refs","closeModalBtn","modal","toggleModal","classList","toggle","body","e","card","target","closest","epName","getAttribute","epId","epAir","remove","add"],"version":3,"file":"episodes.1716f0e0.js.map"}